// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Result$Rationale = require("rationale/src/Result.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Cdf$PredictionAnalysis = require("./Cdf.bs.js");
var Percentage$PredictionAnalysis = require("./Percentage.bs.js");
var DefaultParams$PredictionAnalysis = require("../Common/DefaultParams.bs.js");
var MeasurementValueWrapper$PredictionAnalysis = require("./MeasurementValueWrapper.bs.js");

function fromString(param) {
  switch (param) {
    case "AMBIGUOUS" : 
        return /* Ambiguous */0;
    case "FALSE_CONDITIONAL" : 
        return /* FalseConditional */1;
    case "OTHER" : 
        return /* Other */3;
    case "RESULT_NOT_AVAILABLE" : 
        return /* ResultNotAvailable */2;
    default:
      return undefined;
  }
}

var Unresolvable = /* module */[/* fromString */fromString];

function fromString$1(param) {
  switch (param) {
    case "GENERIC" : 
        return /* Generic */0;
    case "QUESTION_FEEDBACK" : 
        return /* QuestionFeedback */1;
    case "UPDATE" : 
        return /* Update */2;
    default:
      return undefined;
  }
}

function stringToUnresolvableResolution(str) {
  return Result$Rationale.ofOption("Invalid Unresolvable Resolution: " + str, fromString(str));
}

function stringToComment(str) {
  return Result$Rationale.ofOption("Invalid Comment Resolution: " + str, fromString$1(str));
}

function jsonToCdfPair(j) {
  var xs = Json_decode.field("xs", (function (param) {
          return Json_decode.array(Json_decode.$$float, param);
        }), j);
  var ys = Json_decode.field("ys", (function (param) {
          return Json_decode.array(Json_decode.$$float, param);
        }), j);
  return /* tuple */[
          xs,
          ys
        ];
}

function jsonToSimpleValue(fn, json) {
  try {
    return /* Ok */Block.__(0, [Curry._1(fn, json)]);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown Error."]);
    }
  }
}

function run(json) {
  var t = Json_decode.field("dataType", Json_decode.string, json);
  var decodingType = MeasurementValueWrapper$PredictionAnalysis.Name[/* fromString */0](t);
  if (decodingType.tag) {
    return /* Error */Block.__(1, [decodingType[0]]);
  } else {
    var a = decodingType[0];
    var json$1 = json;
    var jsonToFinalValue = function (toSimpleValueFn, toFinalValueFn) {
      return Curry._2(Result$Rationale.Infix[/* >>= */0], jsonToSimpleValue((function (param) {
                        return Json_decode.field("data", toSimpleValueFn, param);
                      }), json$1), toFinalValueFn);
    };
    if (a >= -488794310) {
      if (a >= 365180284) {
        if (a >= 564146209) {
          return jsonToFinalValue(Json_decode.bool, (function (e) {
                        return /* Ok */Block.__(0, [/* `Binary */[
                                    564146209,
                                    e
                                  ]]);
                      }));
        } else {
          return jsonToFinalValue(Json_decode.$$float, (function (e) {
                        return /* Ok */Block.__(0, [/* `Float */[
                                    365180284,
                                    e
                                  ]]);
                      }));
        }
      } else if (a >= 3354245) {
        return jsonToFinalValue(jsonToCdfPair, (function (param) {
                      var __x = Result$Rationale.bimap((function (r) {
                              return r;
                            }), Cdf$PredictionAnalysis.Errors[/* toString */0], Cdf$PredictionAnalysis.make(param[0], param[1], DefaultParams$PredictionAnalysis.Cdf[/* minSaveLength */2], DefaultParams$PredictionAnalysis.Cdf[/* maxSaveLength */1], /* () */0));
                      return Belt_Result.map(__x, Cdf$PredictionAnalysis.toMeasurementValue);
                    }));
      } else {
        return jsonToFinalValue(Json_decode.$$float, (function (e) {
                      var __x = Percentage$PredictionAnalysis.make(e);
                      return Belt_Result.map(__x, Percentage$PredictionAnalysis.toMeasurementValue);
                    }));
      }
    } else if (a >= -826170817) {
      return jsonToFinalValue(Json_decode.string, (function (e) {
                    return Belt_Result.map(stringToComment(e), (function (r) {
                                  return /* `Comment */[
                                          -826170817,
                                          r
                                        ];
                                }));
                  }));
    } else {
      return jsonToFinalValue(Json_decode.string, (function (e) {
                    return Belt_Result.map(stringToUnresolvableResolution(e), (function (r) {
                                  return /* `UnresolvableResolution */[
                                          -882782856,
                                          r
                                        ];
                                }));
                  }));
    }
  }
}

var Keys = [Unresolvable];

var toMeasurementValue = run;

exports.Keys = Keys;
exports.toMeasurementValue = toMeasurementValue;
/* Result-Rationale Not a pure module */
