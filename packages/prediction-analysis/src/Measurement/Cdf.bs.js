// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Result$Rationale = require("rationale/src/Result.js");
var E$PredictionAnalysis = require("../Utility/E.bs.js");
var Distribution$PredictionAnalysis = require("./Distribution.bs.js");

function toDistribution(param) {
  return Distribution$PredictionAnalysis.T[/* make */4](param[/* xs */0], param[/* ys */1]);
}

function toString(e) {
  var match = e[/* error */1];
  if (typeof match === "number") {
    switch (match) {
      case 0 : 
          return "X should be incrementing";
      case 1 : 
          return "Y should be incrementing";
      case 2 : 
          return "Out of range";
      case 3 : 
          return "Xs and Ys are different lengths";
      case 4 : 
          return "Some Y values outside 0-1 range";
      
    }
  } else if (match.tag) {
    return "Length is less than " + String(match[0]);
  } else {
    return "Length is more than " + String(match[0]);
  }
}

function verifyMinLength(minLength, param) {
  var ys = param[/* ys */1];
  var xs = param[/* xs */0];
  var match = xs.length < minLength || ys.length < minLength;
  if (match) {
    return /* Error */Block.__(1, [/* record */[
                /* cdf *//* record */[
                  /* xs */xs,
                  /* ys */ys
                ],
                /* error : LengthLessThan */Block.__(1, [minLength])
              ]]);
  } else {
    return /* Ok */Block.__(0, [/* record */[
                /* xs */xs,
                /* ys */ys
              ]]);
  }
}

function verifySameLength(param) {
  var ys = param[/* ys */1];
  var xs = param[/* xs */0];
  var match = xs.length !== ys.length;
  if (match) {
    return /* Error */Block.__(1, [/* record */[
                /* cdf *//* record */[
                  /* xs */xs,
                  /* ys */ys
                ],
                /* error : DifferentLength */3
              ]]);
  } else {
    return /* Ok */Block.__(0, [/* record */[
                /* xs */xs,
                /* ys */ys
              ]]);
  }
}

function runAll(xs, ys, minLength, maxLength, param) {
  return Curry._2(Result$Rationale.Infix[/* >>= */0], Curry._2(Result$Rationale.Infix[/* >>= */0], verifyMinLength(minLength, /* record */[
                      /* xs */xs,
                      /* ys */ys
                    ]), (function (param) {
                    var maxLength$1 = maxLength;
                    var param$1 = param;
                    var ys = param$1[/* ys */1];
                    var xs = param$1[/* xs */0];
                    var match = xs.length > maxLength$1;
                    if (match) {
                      return /* Error */Block.__(1, [/* record */[
                                  /* cdf *//* record */[
                                    /* xs */xs,
                                    /* ys */ys
                                  ],
                                  /* error : LengthGreaterThan */Block.__(0, [maxLength$1])
                                ]]);
                    } else {
                      return /* Ok */Block.__(0, [/* record */[
                                  /* xs */xs,
                                  /* ys */ys
                                ]]);
                    }
                  })), verifySameLength);
}

function makeWithoutValidations(xs, ys) {
  return /* record */[
          /* xs */xs,
          /* ys */ys
        ];
}

function toPdf(t) {
  return Curry._1(Distribution$PredictionAnalysis.T[/* toPdf */5], toDistribution(t));
}

function toMeasurementValue(t) {
  return /* `Cdf */[
          3354245,
          t
        ];
}

var Errors = [toString];

var make = runAll;

exports.Errors = Errors;
exports.make = make;
exports.makeWithoutValidations = makeWithoutValidations;
exports.toMeasurementValue = toMeasurementValue;
exports.toDistribution = toDistribution;
exports.toPdf = toPdf;
/* Result-Rationale Not a pure module */
