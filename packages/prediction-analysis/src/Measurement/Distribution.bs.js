// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var E$PredictionAnalysis = require("../Utility/E.bs.js");
var CdfLibraryImporter$PredictionAnalysis = require("../Utility/CdfLibraryImporter.bs.js");

function hasLength(t) {
  return t[/* xs */0].length !== 0;
}

var empty_000 = /* xs : array */[];

var empty_001 = /* ys : array */[];

var empty = /* record */[
  empty_000,
  empty_001
];

var findX = CdfLibraryImporter$PredictionAnalysis.Distribution[/* findX */1];

var findY = CdfLibraryImporter$PredictionAnalysis.Distribution[/* findY */2];

function make(xs, ys) {
  return /* record */[
          /* xs */xs,
          /* ys */ys
        ];
}

var toPdf = CdfLibraryImporter$PredictionAnalysis.Distribution[/* toPdf */0];

var integral = CdfLibraryImporter$PredictionAnalysis.Distribution[/* integral */3];

function minX(x, dists) {
  return E$PredictionAnalysis.FloatArray[/* min */0]($$Array.map(Curry._1(findX, x), dists));
}

function maxX(x, dists) {
  return E$PredictionAnalysis.FloatArray[/* max */1]($$Array.map(Curry._1(findX, x), dists));
}

var Ts = /* module */[
  /* minX */minX,
  /* maxX */maxX
];

var T = [
  hasLength,
  empty,
  findX,
  findY,
  make,
  toPdf,
  integral
];

exports.T = T;
exports.Ts = Ts;
/* E-PredictionAnalysis Not a pure module */
