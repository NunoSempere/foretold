// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Option$Rationale = require("rationale/src/Option.js");
var E$PredictionAnalysis = require("../Utility/E.bs.js");
var StartAtDistribution$PredictionAnalysis = require("../Utility/StartAtDistribution.bs.js");
var MeasurementValueJson$PredictionAnalysis = require("../Measurement/MeasurementValueJson.bs.js");
var MeasurementValueMeasures$PredictionAnalysis = require("../Measures/MeasurementValueMeasures.bs.js");
var PredictionResolutionGroup$PredictionAnalysis = require("../ScoringDataStructures/PredictionResolutionGroup.bs.js");
var PredictionResolutionOverTime$PredictionAnalysis = require("../ScoringDataStructures/PredictionResolutionOverTime.bs.js");
var PredictionResolutionGroupMeasures$PredictionAnalysis = require("../Measures/PredictionResolutionGroupMeasures.bs.js");
var PredictionResolutionOverTimeMeasures$PredictionAnalysis = require("../Measures/PredictionResolutionOverTimeMeasures.bs.js");

function fromResult(r) {
  if (r.tag) {
    return /* record */[
            /* data */undefined,
            /* error */Caml_option.some(r[0])
          ];
  } else {
    return /* record */[
            /* data */Caml_option.some(r[0]),
            /* error */undefined
          ];
  }
}

var JsResult = /* module */[/* fromResult */fromResult];

var MarketType = /* module */[
  /* marketScore : MarketScore */-870794282,
  /* nonMarketScore : NonMarketScore */463448073
];

var make = MeasurementValueJson$PredictionAnalysis.toMeasurementValue;

var differentialEntropy = MeasurementValueMeasures$PredictionAnalysis.differentialEntropy;

var MeasurementValueI = /* module */[
  /* make */make,
  /* differentialEntropy */differentialEntropy
];

function make$1(agentPrediction, marketPrediction, resolution) {
  var match = MeasurementValueJson$PredictionAnalysis.toMeasurementValue(agentPrediction);
  var match$1 = Option$Rationale.map(MeasurementValueJson$PredictionAnalysis.toMeasurementValue, marketPrediction);
  var match$2 = MeasurementValueJson$PredictionAnalysis.toMeasurementValue(resolution);
  if (match.tag) {
    return /* Error */Block.__(1, [match[0]]);
  } else {
    var agentPrediction$1 = match[0];
    if (match$1 !== undefined) {
      var match$3 = match$1;
      if (match$3.tag) {
        return /* Error */Block.__(1, [match$1[0]]);
      } else if (match$2.tag) {
        return /* Error */Block.__(1, [match$2[0]]);
      } else {
        return PredictionResolutionGroup$PredictionAnalysis.fromArbitraryMeasurementValues(agentPrediction$1, Caml_option.some(match$3[0]), match$2[0], /* () */0);
      }
    } else if (match$2.tag) {
      return /* Error */Block.__(1, [match$2[0]]);
    } else {
      return PredictionResolutionGroup$PredictionAnalysis.fromArbitraryMeasurementValues(agentPrediction$1, Caml_option.some(undefined), match$2[0], /* () */0);
    }
  }
}

function pointScore(marketType, scoringCombination) {
  return PredictionResolutionGroupMeasures$PredictionAnalysis.pointScore(marketType, undefined, scoringCombination, undefined, /* () */0);
}

var PredictionResolutionGroupI = /* module */[
  /* make */make$1,
  /* pointScore */pointScore
];

function toMeasurementValue(item) {
  return Belt_Result.map(MeasurementValueJson$PredictionAnalysis.toMeasurementValue(item[/* measurement */0]), (function (e) {
                return PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](item[/* time */1], e);
              }));
}

function itemArray(items) {
  return E$PredictionAnalysis.Result[/* arrayFlatten */1]($$Array.map(toMeasurementValue, items));
}

function make$2(agentPredictions, marketPredictions, resolution) {
  var match = itemArray(agentPredictions);
  var match$1 = itemArray(marketPredictions);
  var match$2 = toMeasurementValue(resolution);
  if (match.tag) {
    return /* Error */Block.__(1, [match[0].join(", ")]);
  } else if (match$1.tag) {
    return /* Error */Block.__(1, [match$1[0].join(", ")]);
  } else if (match$2.tag) {
    return /* Error */Block.__(1, [match$2[0]]);
  } else {
    return PredictionResolutionOverTime$PredictionAnalysis.fromMeasurementCombination(match[0], Caml_option.some(match$1[0]), match$2[0]);
  }
}

function averagePointScore(marketType, lowestTimeForAverage, e) {
  return PredictionResolutionOverTimeMeasures$PredictionAnalysis.averagePointScore(marketType, undefined, e, lowestTimeForAverage, /* () */0);
}

function pointScoreDistribution(marketType, e) {
  var __x = PredictionResolutionOverTimeMeasures$PredictionAnalysis.pointScoreDistribution(marketType, undefined, e, /* () */0);
  return Belt_Result.map(__x, StartAtDistribution$PredictionAnalysis.toJs);
}

var PredictionResolutionOverTimeI = /* module */[
  /* toMeasurementValue */toMeasurementValue,
  /* itemArray */itemArray,
  /* make */make$2,
  /* averagePointScore */averagePointScore,
  /* pointScoreDistribution */pointScoreDistribution
];

exports.JsResult = JsResult;
exports.MarketType = MarketType;
exports.MeasurementValueI = MeasurementValueI;
exports.PredictionResolutionGroupI = PredictionResolutionGroupI;
exports.PredictionResolutionOverTimeI = PredictionResolutionOverTimeI;
/* Option-Rationale Not a pure module */
