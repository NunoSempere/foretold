// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Percentage$PredictionAnalysis = require("../../src/Measurement/Percentage.bs.js");
var PredictionResolutionOverTime$PredictionAnalysis = require("../../src/ScoringDataStructures/PredictionResolutionOverTime.bs.js");
var PredictionResolutionOverTimeMeasures$PredictionAnalysis = require("../../src/Measures/PredictionResolutionOverTimeMeasures.bs.js");

Jest.describe("#scorePointCombination", (function (param) {
        Jest.test("with PercentagePercentage score", (function (param) {
                var combinationOverTime_001 = /* record */[
                  /* agentPredictions : array */[
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](3, Percentage$PredictionAnalysis.makeWithoutValidations(0.70)),
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](8, Percentage$PredictionAnalysis.makeWithoutValidations(0.88))
                  ],
                  /* marketPredictions *//* array */[
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](0, Percentage$PredictionAnalysis.makeWithoutValidations(0.5)),
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](5, Percentage$PredictionAnalysis.makeWithoutValidations(0.7))
                  ],
                  /* resolution */PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](10, Percentage$PredictionAnalysis.makeWithoutValidations(0.95))
                ];
                var combinationOverTime = /* `PercentagePercentage */[
                  1067596532,
                  combinationOverTime_001
                ];
                return Jest.Expect[/* toBeCloseTo */3](0.192, Jest.Expect[/* expect */0](Belt_Result.getExn(PredictionResolutionOverTimeMeasures$PredictionAnalysis.averagePointScore(/* MarketScore */-870794282, undefined, combinationOverTime, undefined, /* () */0))));
              }));
        Jest.test("with PercentagePercentage score2", (function (param) {
                var combinationOverTime_001 = /* record */[
                  /* agentPredictions : array */[
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](3000, Percentage$PredictionAnalysis.makeWithoutValidations(0.70)),
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](8000, Percentage$PredictionAnalysis.makeWithoutValidations(0.88))
                  ],
                  /* marketPredictions *//* array */[
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](0, Percentage$PredictionAnalysis.makeWithoutValidations(0.5)),
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](5000, Percentage$PredictionAnalysis.makeWithoutValidations(0.7))
                  ],
                  /* resolution */PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](10000, Percentage$PredictionAnalysis.makeWithoutValidations(0.95))
                ];
                var combinationOverTime = /* `PercentagePercentage */[
                  1067596532,
                  combinationOverTime_001
                ];
                return Jest.Expect[/* toBeCloseTo */3](0.192, Jest.Expect[/* expect */0](Belt_Result.getExn(PredictionResolutionOverTimeMeasures$PredictionAnalysis.averagePointScore(/* MarketScore */-870794282, undefined, combinationOverTime, undefined, /* () */0))));
              }));
        Jest.test("with PercentagePercentage over a long time", (function (param) {
                var combinationOverTime_001 = /* record */[
                  /* agentPredictions : array */[PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](3000, Percentage$PredictionAnalysis.makeWithoutValidations(0.70))],
                  /* marketPredictions *//* array */[
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](0, Percentage$PredictionAnalysis.makeWithoutValidations(0.5)),
                    PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](5000, Percentage$PredictionAnalysis.makeWithoutValidations(0.7))
                  ],
                  /* resolution */PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](10000, Percentage$PredictionAnalysis.makeWithoutValidations(0.95))
                ];
                var combinationOverTime = /* `PercentagePercentage */[
                  1067596532,
                  combinationOverTime_001
                ];
                return Jest.Expect[/* toBeCloseTo */3](0.121, Jest.Expect[/* expect */0](Belt_Result.getExn(PredictionResolutionOverTimeMeasures$PredictionAnalysis.averagePointScore(/* MarketScore */-870794282, undefined, combinationOverTime, undefined, /* () */0))));
              }));
        return Jest.test("with PercentagePercentage with testing", (function (param) {
                      var combinationOverTime_001 = /* record */[
                        /* agentPredictions : array */[PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](3000, Percentage$PredictionAnalysis.makeWithoutValidations(0.70))],
                        /* marketPredictions *//* array */[
                          PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](3000, Percentage$PredictionAnalysis.makeWithoutValidations(0.5)),
                          PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](5000, Percentage$PredictionAnalysis.makeWithoutValidations(0.7))
                        ],
                        /* resolution */PredictionResolutionOverTime$PredictionAnalysis.MeasurementWithTime[/* make */1](10000, Percentage$PredictionAnalysis.makeWithoutValidations(0.95))
                      ];
                      var combinationOverTime = /* `PercentagePercentage */[
                        1067596532,
                        combinationOverTime_001
                      ];
                      return Jest.Expect[/* toBeCloseTo */3](0.085, Jest.Expect[/* expect */0](Belt_Result.getExn(PredictionResolutionOverTimeMeasures$PredictionAnalysis.averagePointScore(/* MarketScore */-870794282, undefined, combinationOverTime, 0.0, /* () */0))));
                    }));
      }));

var mkPer = Percentage$PredictionAnalysis.makeWithoutValidations;

exports.mkPer = mkPer;
/*  Not a pure module */
