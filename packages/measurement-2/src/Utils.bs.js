// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function decodeResult(fn, json) {
  try {
    return /* Ok */Block.__(0, [Curry._1(fn, json)]);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown Error."]);
    }
  }
}

function makeDecode(decodeFn) {
  return (function (param) {
      return decodeResult((function (param) {
                    return Json_decode.field("data", decodeFn, param);
                  }), param);
    });
}

function makeEncode(encodeFn, name, i) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "dataType",
                name
              ],
              /* :: */[
                /* tuple */[
                  "data",
                  Curry._1(encodeFn, i)
                ],
                /* [] */0
              ]
            ]);
}

exports.decodeResult = decodeResult;
exports.makeDecode = makeDecode;
exports.makeEncode = makeEncode;
/* No side effect */
