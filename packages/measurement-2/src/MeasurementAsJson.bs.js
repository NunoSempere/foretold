// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Result$Rationale = require("rationale/src/Result.js");
var Types$Measurement = require("./Types.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var floatToPercentage = Types$Measurement.Percentage[/* make */2];

function stringToUnresolvableResolution(str) {
  switch (str) {
    case "AMBIGUOUS" : 
        return /* Ok */Block.__(0, [/* AMBIGUOUS */-974356372]);
    case "FALSE_CONDITIONAL" : 
        return /* Ok */Block.__(0, [/* FALSE_CONDITIONAL */606665514]);
    case "OTHER" : 
        return /* Ok */Block.__(0, [/* OTHER */879009456]);
    case "RESULT_NOT_AVAILABLE" : 
        return /* Ok */Block.__(0, [/* RESULT_NOT_AVAILABLE */-8423941]);
    default:
      return /* Error */Block.__(1, ["Invalid Unresolvable Resolution: " + str]);
  }
}

function stringToComment(str) {
  switch (str) {
    case "GENERIC" : 
        return /* Ok */Block.__(0, [/* GENERIC */909067767]);
    case "QUESTION_FEEDBACK" : 
        return /* Ok */Block.__(0, [/* QUESTION_FEEDBACK */-527079426]);
    case "UPDATE" : 
        return /* Ok */Block.__(0, [/* UPDATE */965227017]);
    default:
      return /* Error */Block.__(1, ["Invalid GraphQL Comment: " + str]);
  }
}

var CustomDecoders = /* module */[
  /* floatToPercentage */floatToPercentage,
  /* stringToUnresolvableResolution */stringToUnresolvableResolution,
  /* stringToComment */stringToComment
];

function nameToType(param) {
  switch (param) {
    case "binary" : 
        return /* Ok */Block.__(0, [/* Binary */564146209]);
    case "comment" : 
        return /* Ok */Block.__(0, [/* Comment */-826170817]);
    case "floatCdf" : 
        return /* Ok */Block.__(0, [/* Cdf */3354245]);
    case "floatPoint" : 
        return /* Ok */Block.__(0, [/* Float */365180284]);
    case "percentage" : 
        return /* Ok */Block.__(0, [/* Percentage */-488794310]);
    case "unresolvableResolution" : 
        return /* Ok */Block.__(0, [/* UnresolvableResolution */-882782856]);
    default:
      return /* Error */Block.__(1, ["Not found"]);
  }
}

function decodeResult(fn, json) {
  try {
    return /* Ok */Block.__(0, [Curry._1(fn, json)]);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown Error."]);
    }
  }
}

function decodeData(a, json) {
  var convert = function (decoderFn, toValue) {
    return Curry._2(Result$Rationale.Infix[/* >>= */0], decodeResult((function (param) {
                      return Json_decode.field("data", decoderFn, param);
                    }), json), toValue);
  };
  if (a >= -488794310) {
    if (a >= 365180284) {
      if (a >= 564146209) {
        return convert(Json_decode.bool, (function (e) {
                      return /* Ok */Block.__(0, [/* `Binary */[
                                  564146209,
                                  e
                                ]]);
                    }));
      } else {
        return convert(Json_decode.$$float, (function (e) {
                      return /* Ok */Block.__(0, [/* `Float */[
                                  365180284,
                                  e
                                ]]);
                    }));
      }
    } else if (a >= 3354245) {
      return convert(Json_decode.$$float, (function (e) {
                    return /* Ok */Block.__(0, [/* `Float */[
                                365180284,
                                e
                              ]]);
                  }));
    } else {
      return convert(Json_decode.$$float, (function (e) {
                    return /* Ok */Block.__(0, [/* `Percentage */[
                                -488794310,
                                e
                              ]]);
                  }));
    }
  } else if (a >= -826170817) {
    return convert(Json_decode.string, (function (e) {
                  var __x = stringToComment(e);
                  return Belt_Result.map(__x, (function (r) {
                                return /* `Comment */[
                                        -826170817,
                                        r
                                      ];
                              }));
                }));
  } else {
    return convert(Json_decode.string, (function (e) {
                  var __x = stringToUnresolvableResolution(e);
                  return Belt_Result.map(__x, (function (r) {
                                return /* `UnresolvableResolution */[
                                        -882782856,
                                        r
                                      ];
                              }));
                }));
  }
}

function run(json) {
  var t = Json_decode.field("dataType", Json_decode.string, json);
  var decodingType = nameToType(t);
  if (decodingType.tag) {
    return /* Error */Block.__(1, [decodingType[0]]);
  } else {
    return decodeData(decodingType[0], json);
  }
}

var JsonToMeasurement = /* module */[
  /* CustomDecoders */CustomDecoders,
  /* nameToType */nameToType,
  /* decodeResult */decodeResult,
  /* decodeData */decodeData,
  /* run */run
];

exports.JsonToMeasurement = JsonToMeasurement;
/* Result-Rationale Not a pure module */
